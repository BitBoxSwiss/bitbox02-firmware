#!/usr/bin/env bash

# This script checks tidy on files that was modified between $COMPARE_REV and HEAD

# Fail on error
set -e

# Exit on pipe fail
set -o pipefail

CLANGTIDY=${CLANGTIDY:-clang-tidy-18}

command -v git >/dev/null 2>&1 || { echo >&2 "git is missing"; exit 1; }
command -v xargs >/dev/null 2>&1 || { echo >&2 "xargs is missing"; exit 1; }
command -v ${CLANGTIDY} >/dev/null 2>&1 || { echo >&2 "${CLANGTIDY} is missing"; exit 1; }

# check if stdout is a terminal.
if test -t 1; then
	# see if it supports colors.
	ncolors=$(tput colors)
	if test -n "$ncolors" && test $ncolors -ge 8; then
		normal="$(tput sgr0)"
		red="$(tput setaf 1)"
		green="$(tput setaf 2)"
	fi
fi

for dir in build build-build; do
	if ! test -d ${dir}; then
		echo "Missing ${dir}"
		exit 1
	fi

	# Remove flags unknown to tidy
	sed -i 's/-mcpu=cortex-m4//g; s/-mfloat-abi=softfp//g; s/-mlong-calls//g; s/-mthumb//g; s/--specs=nano.specs//g; s/--specs=nosys.specs//g;
	        s/-Wno-cast-function-type//g; s/-mfpu=fpv4-sp-d16//g; s/-Wformat-signedness//g' ${dir}/compile_commands.json

	# Only check our files
	SOURCES1=$(git --no-pager diff --diff-filter=d --name-only ${COMPARE_REV} HEAD |\
		grep -v -E "(^src/(drivers|ui/fonts)|.*ugui.*|.*base32.*)" |\
		grep -E "^(src)" |\
		grep -v "^test/unit-test/u2f/" |\
		grep -E "\.c\$" || true)

	# Only check files if they are in the compile_commands.json file
	SOURCES=""
	for SOURCE in ${SOURCES1}; do
		if grep -q ${SOURCE} ${dir}/compile_commands.json; then
			SOURCES+=" $SOURCE"
		fi
	done

	if [ -z "${SOURCES}" ] ; then
		continue
	fi

	echo "Checking $(echo ${SOURCES} | wc -w) files with clang-tidy"
	# The list of tidy checks must stay in sync with scripts/tidy
	${CLANGTIDY} -quiet -p ${dir} -checks=-*,clang-analyzer-*,-clang-analyzer-cplusplus*,bugprone-*,performance-*,portability-*,readability-*,-readability-braces-around-statements,-readability-magic-numbers,-readability-isolate-declaration,-readability-identifier-length,-readability-function-cognitive-complexity,-bugprone-reserved-identifier,-bugprone-easily-swappable-parameters,-bugprone-narrowing-conversions,-performance-no-int-to-ptr,-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,-readability-avoid-unconditional-preprocessor-if -warnings-as-errors=* -header-filter '.*' ${SOURCES}
done
