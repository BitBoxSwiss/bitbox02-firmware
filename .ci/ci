#!/bin/bash

set -x
set -e

# Deny warnings in rust. CI will fail to compile any code with warnings in it.
export RUSTFLAGS="-Dwarnings"

# Check the da14531 firmware matches the hash file, which makes reviewing updates to the binary
# easier.
sha256sum --check bitbox-da14531-firmware.bin.sha256

# Check style for C and Rust
./.ci/check-style

# Check that we can generate protobuf definitions for python
make -C py clean
make -C py

# Check style for python
./.ci/check-pep8

# check ./releases sigs
./.ci/check-release-sigs

# Make build directories so we can do some static analysis
#  - prepare-tidy will create build dirs and more importantly the
#    compile_commands.json needed for clang-tidy
make prepare-tidy
./.ci/check-tidy

# Build and run Unit tests
make -j8 unit-test
make -j8 run-unit-tests
make -j8 run-rust-unit-tests

# Delete the build directories so that SANITIZE=OFF will take effect
# Valgrind cannot run programs compiled with address sanitizing on.
make clean
make -j8 unit-test SANITIZE=OFF
make -j8 run-valgrind-on-unit-tests

# BUild simulator
make -j8 simulator

# Rust linter
make -j8 run-rust-clippy

# Check that coverage report building is working.
make coverage

# Bootloader variants
make -j8 bootloader
make -j8 bootloader-development
make -j8 bootloader-development-locked
make -j8 bootloader-production
make -j8 bootloader-debug

make -j8 bootloader-btc
make -j8 bootloader-btc-development
make -j8 bootloader-btc-production

make -j8 bootloader-plus
make -j8 bootloader-plus-development
make -j8 bootloader-plus-debug

# Firmware
make -j8 firmware
make -j8 firmware-btc
make -j8 factory-setup
make -j8 firmware-debug

# Disallow some symbols in the final binary that we don't want.
if arm-none-eabi-nm build/bin/firmware.elf | grep -q "float_to_decimal_common_shortest"; then
    echo "Rust fmt float formatting like {.1} adds significant binary bloat."
    echo "Use something simpler like (float*10).round() as u64, then format with util::decimal::format"
    exit 1
fi
if arm-none-eabi-nm build/bin/firmware.elf | grep -q "strftime"; then
    echo "strftime adds significant binary bloat. Use custom formatting like in `format_dateimte()`."
    exit 1
fi
if arm-none-eabi-nm build/bin/firmware.elf | grep -q "sha26sha512"; then
    # sha26sha512 is a mangled Rust symbol standing for `sha2::sha512`.
    # One can use rustfilt to see the demangled symbols:
    # cargo install rustfilt; arm-none-eabi-nm build/bin/firmware.elf | rustfilt
    echo "sha2::Sha512 adds significant binary bloat."
    echo "Only use it if there is no other sha512 impl available that is smaller."
    exit 1
fi

(cd tools/atecc608; go test ./...)

# Don't generate graphics in CI
(cd build; cmake -DDOC_GRAPHS=NO ..)
make -j8 docs
