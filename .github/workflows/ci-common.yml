# See reference docs at
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions
name: Default branch ci
on:
  workflow_call:
    inputs:
      container-repo:
        required: true
        type: string
      container-version:
        required: true
        type: string
env:
  RUSTFLAGS: "-Dwarnings"
  CFLAGS: "-Werror"

jobs:
  check-sigs:
    runs-on: ubuntu-22.04
    container: ${{ inputs.container-repo }}:${{ inputs.container-version }}
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4

      - name: Check sigs
        run: ./.ci/check-release-sigs

  check-hashes:
    runs-on: ubuntu-22.04
    container: ${{ inputs.container-repo }}:${{ inputs.container-version }}
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4

      - name: Check sigs
        run: ./.ci/check-hashes

  lint-py:
    runs-on: ubuntu-22.04
    container: ${{ inputs.container-repo }}:${{ inputs.container-version }}
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Mark directory as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Lint python (black, mypy, pylint)
        run: |
          make -C py clean
          make -C py
          ./.ci/check-pep8

  lint-src:
    runs-on: ubuntu-22.04
    container:
      image: ${{ inputs.container-repo }}:${{ inputs.container-version }}
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4
        with:
          # Unfortunately linting the sources requires running cmake, so we need to do a full checkout
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive

      - name: Mark directory as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Lint src code style (clang-format, rustfmt)
        run: ./.ci/check-style

      - name: Lint src bugs/best-practice (clang-tidy, clippy)
        run: |
          make prepare-tidy
          ./.ci/check-tidy
          make run-rust-clippy

  unit-tests:
    runs-on: ubuntu-22.04
    container:
      image: ${{ inputs.container-repo }}:${{ inputs.container-version }}
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive

      - name: Mark directory as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Build unit-tests
        run: make -j$(($(nproc) + 1)) unit-test

      - name: Check that address sanitizer is enabled
        run: nm build-build/bin/test_cleanup | grep __asan_version_mismatch_check_v8

      - name: run unit-tests
        run: make run-unit-tests

      - name: run rust unit-tests
        run: make run-rust-unit-tests

      - name: run ATECC608 unit tests
        run: (cd tools/atecc608; go test ./...)

  leakcheck:
    runs-on: ubuntu-22.04
    container: ${{ inputs.container-repo }}:${{ inputs.container-version }}
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive

      - name: Mark directory as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Run unit tests under valgrind
        run: make run-valgrind-on-unit-tests SANITIZE=OFF

  coverage:
    runs-on: ubuntu-22.04
    container: ${{ inputs.container-repo }}:${{ inputs.container-version }}
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive

      - name: Mark directory as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Build coverage report
        run: make coverage

  build:
    strategy:
      matrix:
        target:
          - bootloader
          - bootloader-development
          - bootloader-development-locked
          - bootloader-production
          - bootloader-debug
          - bootloader-btc
          - bootloader-btc-development
          - bootloader-btc-production
          - bootloader-plus
          - bootloader-plus-development
          - bootloader-plus-production
          - bootloader-plus-debug
          - bootloader-plus-btc
          - bootloader-plus-btc-development
          - bootloader-plus-btc-production
          - firmware
          - firmware-btc
          - factory-setup
          - firmware-debug
          - simulator
    runs-on: ubuntu-22.04
    container:
      image: ${{ inputs.container-repo }}:${{ inputs.container-version }}
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4
        with:
          # Github action is broken: https://github.com/actions/checkout/issues/1638
          # Remove the below line when the issue is resolved
          ref: ${{ github.ref }}
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive

      - name: Mark directory as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Build ${{ matrix.target }}
        run: make -j$(($(nproc)+1)) ${{ matrix.target }}

      - name: Check unwanted symbols
        if: matrix.target == 'firmware' && !cancelled()
        run: ./.ci/check-unwanted-symbols

      - name: Print hashes
        run: sha256sum build*/bin/*

      - name: Upload artifact
        if: github.event_name == 'push' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.target}}-${{github.sha}}.bin
          path: |
            build*/bin/*.bin
            build*/bin/*.elf
            build*/bin/*.map
            build*/bin/simulator

  doc:
    runs-on: ubuntu-22.04
    container: ${{ inputs.container-repo }}:${{ inputs.container-version }}
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive

      - name: Mark directory as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Build ${{ matrix.target }}
        run: |
          (mkdir -p build; cd build; cmake -DDOC_GRAPHS=NO ..)
          make -j$(($(nproc)+1)) docs

  report-artifacts:
    needs: [build]
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && !cancelled()
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create vars
        id: vars
        run: |
          echo "git_sha_short=$(git rev-parse --short HEAD)" >> ${GITHUB_OUTPUT}
          {
            echo "git_shortlog<<EOF"
            git shortlog HEAD~..HEAD
            echo EOF
          } >> ${GITHUB_OUTPUT}
      - name: Send message to mattermost
        uses: mattermost/action-mattermost-notify@master
        continue-on-error: true
        if: job.status == 'success'
        with:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MM_WEBHOOK_URL }}
          MATTERMOST_ICON_URL: https://cdn4.iconfinder.com/data/icons/basic-ui-2-line/32/check-mark-checklist-complete-done-512.png
          MATTERMOST_CHANNEL: eng-artifacts
          TEXT: |
            **${{ github.repository }}: Artifacts built**
            ([${{ github.ref_name }}](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}), [${{ steps.vars.outputs.git_sha_short }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}), [artifacts](https://github.com/${{ github.repository }}/actions/runs/${{github.run_id}}#artifacts))
            ```
            ${{ steps.vars.outputs.git_shortlog }}
            ```
