# Copyright 2024 Shift Cryptosecurity AG
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#-----------------------------------------------------------------------------
# Simulator Next Generation
#

set(RUST_BINARY_DIR ${CMAKE_BINARY_DIR}/src/rust)

set(RUSTFLAGS "-L${CMAKE_ARCHIVE_OUTPUT_DIRECTORY} -lstatic=fatfs -lstatic=secp256k1 --cfg=rust_secp_no_symbol_renaming")

if(SANITIZE_ADDRESS OR SANITIZE_UNDEFINED)
    string(APPEND RUSTFLAGS " -Zexternal-clangrt -Cdefault-linker-libraries=y")
    # When building with address sanitizer it is important that llvm/clang is
    # the same version as rustcs llvm. On macos this can be achieved by
    # installing llvm from brew and then prepend the path to its binary dir to
    # PATH. By default rust uses `cc` as linker, but this will pick the system llvm.
    if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
        string(APPEND RUSTFLAGS " -Clinker=clang")
    endif()
endif()
if(SANITIZE_ADDRESS)
    string(APPEND RUSTFLAGS " -Clink-arg=-fsanitize=address -Zsanitizer=address")
    set(CFLAGS "-fsanitize=address")
endif()
if(SANITIZE_UNDEFINED)
    string(APPEND RUSTFLAGS " -Clink-arg=-fsanitize=undefined")
    string(APPEND CFLAGS " -fsanitize=undefined")
endif()

execute_process(COMMAND rustc --print host-tuple OUTPUT_VARIABLE LLVM_HOST_TUPLE OUTPUT_STRIP_TRAILING_WHITESPACE)

# Supplying llvm host tuple is necessary for address sanitization and doesn't
# hurt during regular builds.
add_custom_command(
    OUTPUT dummy ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/simulator-graphical
    COMMAND
      ${CMAKE_COMMAND} -E env
      MACOSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
      RUSTFLAGS=${RUSTFLAGS}
      CFLAGS=${CFLAGS}
      RUSTC_BOOTSTRAP=1
      cargo build --manifest-path ${CMAKE_CURRENT_SOURCE_DIR}/Cargo.toml --target-dir ${RUST_BINARY_DIR} --target=${LLVM_HOST_TUPLE} --release
    COMMAND
      ${CMAKE_COMMAND} -E copy
      ${RUST_BINARY_DIR}/${LLVM_HOST_TUPLE}/release/simulator-graphical
      ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/simulator-graphical
    DEPENDS rust-cbindgen secp256k1 fatfs
    WORKING_DIRECTORY ${RUST_BINARY_DIR}
)

add_custom_target(simulator-graphical
    DEPENDS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/simulator-graphical
)
